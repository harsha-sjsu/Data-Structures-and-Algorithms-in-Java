/* Question: Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null)
        return null;
        ListNode slow=head;
        ListNode fast=head;
        while(n>0)
        {
            if(fast==null)
            return head;
            fast=fast.next;
            n--;
        }
        if(fast != null)
        {
        while(fast.next!=null)
        {
        slow = slow.next;
        fast = fast.next;
        }
        slow.next=slow.next.next;
        }
        else
        {
            head = head.next;
        }
        return head;
    }
}
