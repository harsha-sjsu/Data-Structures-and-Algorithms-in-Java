/* Question: Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space? */

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
     if(head==null)
        return null;
        ListNode fast=head,slow=head;
        boolean isCycle=false;
        while(slow!=null && fast!=null && fast.next!=null)
        {
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow && fast!=null)
            {
                isCycle=true;
                break;
            }
        }
        if(!isCycle)
        return null;
        else
        {
            fast=head;
            while(true)
            {
                if(fast==slow)
                return fast;
                fast=fast.next;
                slow=slow.next;
            }
        }
    }   
    }
