/* Question: Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed. */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        if(head == null || head.next==null)
        return head;
        ListNode prev=new ListNode(0);
        prev.next=head;
        ListNode result=prev;
        ListNode temp=null,temp1=null;
        while(head!=null && head.next!=null)
        {
            temp=head.next;
            temp1=temp.next;
            
            prev.next=temp;
            temp.next=head;
            
            head.next=temp1;
            prev=head;
            head=temp1;
        }
        return result.next;
    }
}
