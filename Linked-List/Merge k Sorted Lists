// Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0)
        return null;
        if(lists.length == 1)
        return lists[0];
        
        boolean flag = true;
        ListNode result = new ListNode(0);  
        ListNode current = result;
        Queue<ListNode> queue = new PriorityQueue(lists.length, new Comparator<ListNode>() {
        public int compare(ListNode node1, ListNode node2) {
            return node1.val-node2.val;
        }
    });

        for(int i=0;i<lists.length;i++)
            {
                if(lists[i]!=null)
                  queue.add(lists[i]);
            }
        while(!queue.isEmpty())
        {
                ListNode minNode = queue.poll();
                if(minNode.next !=null)
                queue.add(minNode.next);
                current.next = minNode;
                current = current.next;
        }
        return result.next;
    }
}
