/* Question: Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || head.next == null || k == 0)
            return head;
        int count = countList(head);
        k = k % count;
        if(k == 0)
        return head;
        ListNode slow = head, fast = head;
        while(k>0 && fast!=null)
        {
            fast = fast.next;
            k--;
        }
        while(fast!=null && fast.next!=null)
        {
            slow = slow.next;
            fast = fast.next;
        }
            ListNode result = slow.next;
            slow.next = null;
            fast.next= head;
            return result;
    }
    private int countList(ListNode head)
    {
        int count = 0;
        while(head!=null)
        {
            count++;
            head = head.next;
        }
        return count;
    }
}
