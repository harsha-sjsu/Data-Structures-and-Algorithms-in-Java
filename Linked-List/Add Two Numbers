/*Question: You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8 */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int carry = 0;
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        while(l1!=null && l2!=null)
        {
            int digit = (l1.val+l2.val+carry) % 10;
            carry = (l1.val+l2.val+carry) / 10;
            current.next = new ListNode(digit);
            current = current.next;
            l1 = l1.next;
            l2 = l2.next;
        }
        while(l1!=null)
        {
            int digit = (l1.val+carry) % 10;
            carry = (l1.val+carry) / 10;
            current.next = new ListNode(digit);
            current = current.next;
            l1 = l1.next;
        }
        while(l2!=null)
        {
            int digit = (l2.val+carry) % 10;
            carry = (l2.val+carry) / 10;
            current.next = new ListNode(digit);
            current = current.next;
            l2 = l2.next;
        }
        if(carry!=0)
        current.next = new ListNode(carry);
        return dummy.next;
    }
}
