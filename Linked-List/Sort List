// Sort a linked list in O(n log n) time using constant space complexity.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null)
        return null;
        if(head.next == null)
        return head;
        ListNode prev=null, slow = head, fast =head;
        while(slow!=null && fast!=null && fast.next!=null)
        {
            prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        prev.next=null;
        ListNode first = sortList(head);
        ListNode second = sortList(slow);
        return merge(first,second);
    }
    public ListNode merge(ListNode l1, ListNode l2)
    {
        ListNode l = new ListNode(0), p=l;
        while(l1!=null && l2!=null)
        {
            if(l1.val<=l2.val)
            {
                p.next=l1;
                l1=l1.next;
            }
            else
            {
                p.next=l2;
                l2=l2.next;
            }
            p=p.next;
        }
        if(l2==null)
        p.next=l1;
        else
        p.next=l2;
        return l.next;
  }
}
