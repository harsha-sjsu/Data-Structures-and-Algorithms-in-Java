/* Question: Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25. */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

public class Solution {
    public int sumNumbers(TreeNode root) {
        if(root == null)
        return 0;
        List<Integer> list=new ArrayList<Integer>();
        sumNumbers(root,new int[height(root)],list,0);
        int sum=0;
        for(int i:list)
            sum+=i;
        return sum;
    }
    public void sumNumbers(TreeNode root,int[] sb,List<Integer> list,int level)
    {
        if(root == null)
        return;
        sb[level] = root.val;
        if(root.left==null && root.right ==null)
        {
            int sum=0;
            for(int i=0;i<=level;i++)
            sum=sum*10+sb[i];
            list.add(sum);
        }
        sumNumbers(root.left,sb,list,level+1);
        sumNumbers(root.right,sb,list,level+1);
    }
    public int height(TreeNode root)
    {
        if(root == null)
        return 0;
        return 1+Math.max(height(root.left),height(root.right));
    }
}
