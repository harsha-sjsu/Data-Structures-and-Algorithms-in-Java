/* Question: Given a binary tree, return all root-to-leaf paths.

For example, given the following binary tree:

   1
 /   \
2     3
 \
  5
All root-to-leaf paths are:

["1->2->5", "1->3"] 
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    List<List<Integer>> list=new ArrayList<List<Integer>>();
    public List<String> binaryTreePaths(TreeNode root) {
        if(root == null)
        return new ArrayList<String>();
        binaryTreePaths(root,new int[height(root)],list,0);
        List<String> result = new ArrayList<String>();
        for(List<Integer> li:list)
        {
            StringBuilder s= new StringBuilder();
            for(int i=0;i<li.size();i++)
            {
                s.append(li.get(i));
                if(i!=li.size()-1)
                s.append("->");
            }
            result.add(s.toString());
        }
        return result;
    }
    public void binaryTreePaths(TreeNode root,int[] sb,List<List<Integer>> list,int level)
    {
        if(root == null)
        return;
        sb[level] = root.val;
        if(root.left==null && root.right ==null)
        {
            List<Integer> li = new ArrayList<Integer>();
            for(int i=0;i<=level;i++)
            li.add(sb[i]);
            list.add(li);
        }
        binaryTreePaths(root.left,sb,list,level+1);
        binaryTreePaths(root.right,sb,list,level+1);
    }
    public int height(TreeNode root)
    {
        if(root == null)
        return 0;
        return 1+Math.max(height(root.left),height(root.right));
    }
}
