/* Question: Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3 */
   
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
       TreeNode root1=root;
       return isSymmetric(root,root1);
    }
    public boolean isSymmetric(TreeNode root,TreeNode root1) {
       if(root==null && root1==null)
       return true;
       else if((root!=null && root1==null) || (root==null && root1!=null))
       return false;
       else if(root.val != root1.val)
       return false;
       return isSymmetric(root.left, root1.right) && isSymmetric(root.right, root1.left);
    }
}   
