// Given inorder and postorder traversal of a tree, construct the binary tree.

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if(postorder.length ==0 && inorder.length ==0)
        return null;
        return buildTree(inorder,postorder, 0, inorder.length-1,0,postorder.length-1);
    }
    private TreeNode buildTree(int[] inorder, int[] postorder, int inStart, int inEnd, int postStart, int postEnd)
    {
        if(inStart>inEnd || postStart>postEnd)
        return null;
        TreeNode root = new TreeNode(postorder[postEnd]);
        int i=inStart;
        while((i<=inEnd) && root.val!=inorder[i])
        {
            i++;
        }
        root.left = buildTree(inorder, postorder, inStart, i-1,postStart,postStart+i-inStart-1);
        root.right = buildTree(inorder, postorder, i+1, inEnd,postStart+i-inStart,postEnd-1);
       
        return root;
    }
}
