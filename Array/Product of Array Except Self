/*
Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)
*/

public class Solution {
    public int[] productExceptSelf(int[] nums) {
        int[] left = new int[nums.length];
        int[] right = new int[nums.length];
        int p=1;
        for(int i=0;i<nums.length;i++)
        {
            p*= nums[i]; 
            left[i] = p;
        }
        p=1;
        for(int i=nums.length-1;i>=0;i--)
        {
            p*= nums[i]; 
            right[i] = p;
        }
        
        for(int i=0;i<nums.length;i++)
        {
            if(i-1>=0 && i+1< nums.length)
            nums[i] = left[i-1] * right[i+1];
            else if(i-1<0)
            nums[i] = right[i+1];
            else
            nums[i] = left[i-1];
        }
        return nums;
    }
}
