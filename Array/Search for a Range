/*
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].
*/

public class Solution {
    public int[] searchRange(int[] A, int target) {
  int[] result={-1,-1};
  result[0] = searchleft(A,target);
  if(result[0] == -1)
  return result;
  result[1] = searchright(A,target);
  return result;
}
public int searchleft(int[] A,int target)
{
    int low=0, high=A.length-1, res=-1;
    while(low<=high)
    {
        int mid = low+(high-low)/2;
        if((A[mid] == target))
        {
            res = mid;
            high = mid-1;
        }
        else if(A[mid] < target) 
        low = mid+1;
        else if(A[mid] > target)
        high=mid-1;
    }
    return res;
}
public int searchright(int[] A,int target)
{
    int low=0, high=A.length-1, res=-1;
    while(low<=high)
    {
        int mid = low+(high-low)/2;
        if((A[mid] == target))
        {
            res = mid;
            low = mid+1;
        }
        else if(A[mid] < target) 
        low = mid+1;
        else if(A[mid] > target)
        high=mid-1;
    }
    return res;
}

}
