/*
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.
*/

public class Solution {
    public int minPathSum(int[][] grid) {
        int[][] cache = new int[grid.length][grid[0].length];
        cache[0][0] = grid[0][0];
        for(int i=1;i<grid.length;i++)
        cache[i][0]=grid[i][0]+cache[i-1][0];
        
        for(int i=1;i<grid[0].length;i++)
        cache[0][i]=grid[0][i]+cache[0][i-1];
        
        if(grid.length==1 && grid[0].length ==1)
        return grid[0][0];
        
        for(int i=1;i<grid.length;i++)
        {
            for(int j=1;j<grid[0].length;j++)
            {
                cache[i][j] = grid[i][j]+Math.min(cache[i-1][j],cache[i][j-1]);       
            }
        }
        
        return cache[grid.length-1][grid[0].length-1];
    }
}
