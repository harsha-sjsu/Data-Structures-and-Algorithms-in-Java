/*
Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle
[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]
The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).
*/

public class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        if(triangle.size()==1)
        return triangle.get(0).get(0);
        int[] min = new int[triangle.size()];
        int k=0;
        for(int i:triangle.get(triangle.size()-1))
        min[k++]=i;
        for(int i=triangle.size()-2;i>=0;i--)
        {
            for(int j=0;j<triangle.get(i).size();j++)
            {
                min[j]=triangle.get(i).get(j)+Math.min(min[j],min[j+1]);
            }
        }
       return min[0];
}
}
