/*

Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].

*/

public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<Integer>();
        if(matrix.length == 0)
        return result;
        
        int a = 0, b = matrix[0].length-1, c = 0, d = matrix.length-1;
        
        while(true)
        {
            for(int i = a; i <= b; i++)
               result.add(matrix[c][i]); 
            c++;
            if(a>b || c>d)
            break;
            
            for(int i = c; i <= d; i++)
            result.add(matrix[i][b]);
            b--;
            if(a>b || c>d)
            break;
            
            for(int i = b; i >= a; i--)
            result.add(matrix[d][i]);
            d--;
            if(a>b || c>d)
            break;
            
            for(int i = d; i >= c; i--)
            result.add(matrix[i][a]);
            a++;
            if(a>b || c>d)
            break;
        }
        return result;
    }
}

