/*

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]

*/

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
       List<List<Integer>> result = new ArrayList<List<Integer>>();
        solveCombinationSum3Util(result,new ArrayList<Integer>(),k,n,1);
        return result; 
    }
    private void solveCombinationSum3Util(List<List<Integer>> result, List<Integer> temp,int k ,int target,int start)
    {
       if(k==0 && target==0)
       result.add(new ArrayList<Integer>(temp));
           for(int i=start;i<10&&target>=i;i++)
           {
               temp.add(i);
               solveCombinationSum3Util(result,temp,k-1,target-i,i+1);
               temp.remove(temp.size()-1);
           }
    }
}
