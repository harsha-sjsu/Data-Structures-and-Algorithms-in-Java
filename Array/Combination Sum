/*

Given a set of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]

*/

public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(candidates);        
        solveCombinationSumUtil(result,new ArrayList<Integer>(),candidates,target,0);
        return result;
    }
    private void solveCombinationSumUtil(List<List<Integer>> result, List<Integer> temp,int[] candidates ,int k,int start)
    {
       if(k==0)
       result.add(new ArrayList<Integer>(temp));
           for(int i=start;i<candidates.length&&k>=candidates[i];i++)
           {
               temp.add(candidates[i]);
               solveCombinationSumUtil(result,temp,candidates,k-candidates[i],i);
               temp.remove(temp.size()-1);
           }
    }
}
