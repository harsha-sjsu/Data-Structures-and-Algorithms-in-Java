/*
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
*/

public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        Arrays.sort(candidates);        
        solveCombinationSum2Util(result,new ArrayList<Integer>(),candidates,target,0);
        return result;
    }
    private void solveCombinationSum2Util(List<List<Integer>> result, List<Integer> temp,int[] candidates ,int k,int start)
    {
       if(k==0)
       {
            List<Integer> t = new ArrayList<Integer>(temp);
            for(List<Integer> l:result)
            {
                if(l.equals(t))
                return;
            }
            result.add(t);
       }
           for(int i=start;i<candidates.length&&k>=candidates[i];i++)
           {
               temp.add(candidates[i]);
               solveCombinationSum2Util(result,temp,candidates,k-candidates[i],i+1);
               temp.remove(temp.size()-1);
           }
    }
}
