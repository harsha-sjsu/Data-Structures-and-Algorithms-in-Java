/*
Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int iterator=0;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length ==0 && inorder.length ==0)
        return null;
        return buildTree(preorder,inorder, 0, inorder.length-1,inorder.length);
    }
    private TreeNode buildTree(int[] preorder, int[] inorder, int low, int high, int len)
    {
        if(low>high)
        return null;
        int i=0;
        //System.out.println(preorder[0]!=inorder[0]);
        TreeNode root = new TreeNode(preorder[iterator]);
        while((i<len && iterator <len) && preorder[iterator]!=inorder[i])
        {
            i++;
        }
        iterator++;
        //System.out.println(i);
        //System.out.println(i+" the value of i is "+inorder[i]);
        root.left = buildTree(preorder, inorder, low, i-1,len);
        root.right = buildTree(preorder, inorder, i+1, high,len);
        return root;
    }
}
