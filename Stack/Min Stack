/* Question: Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2 */

class MinStack {
        node head = null;
	    node tail = null;
	    int c=0, min_num;
	    public void push(int x) {
	        
	        min_num = x;
	        if(tail!=null && tail.min<x)
	        {
	            min_num=tail.min;
	        }
	        node temp = new node(x,min_num);
	        
	        if(tail == null)
	        {
	            head = temp;
	            tail = temp;
	            return;
	        }
	        	tail.next = temp;
	        	temp.previous=tail;
	            tail = tail.next;
	    }

	    public void pop() {
	        if(tail == null)
	        {
	        	return;
	        }
	        if(tail.previous == null)
	        {
	        	head=null;
	        	tail=null;
	        	return;
	        }
	        tail=tail.previous;
	        tail.next=null;
	    }

	    public int top() {
	    return tail.data;
	    }

	    public int getMin() {
	     
	    return tail.min; 
	    }
	    public class node
	    {
	        int data;
	        int min;
	        node previous;
	        node next;
	        
	        node(int x,int m)
	        {
	            
	            data = x;
	            min = m;
	            previous = null;
	            next = null;
	        }
	    }
}
