/* Question: Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
] */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
    List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root == null)
        return result;
        List<Integer> list = new ArrayList<Integer>();
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        TreeNode dummy = new TreeNode(0);
        q.add(dummy);
        int count = 0;
        while(!q.isEmpty())
        {
            TreeNode current = q.poll();
            if(current!=dummy)
            {
                list.add(current.val);
                if(current.left!=null)
                q.add(current.left);
                if(current.right!=null)
                q.add(current.right);
            }
            else
            {
                result.add(deepCopy(list,count++));
                list.clear();
                if(!q.isEmpty())
                    q.add(dummy);
            }
        }
        return result;
    }
    private List<Integer> deepCopy(List<Integer> list,int count)
    {
        List<Integer> result = new ArrayList<Integer>();
        if(count % 2 ==0 )
        result.addAll(list);
        else
        {
            for(int i=list.size()-1;i>=0;i--)
            result.add(list.get(i));
        }
        return result;
    }
}
