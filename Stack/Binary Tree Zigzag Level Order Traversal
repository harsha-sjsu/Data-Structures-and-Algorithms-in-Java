/* Question: Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
] */

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    List<List<Integer>> result = new ArrayList<List<Integer>>();
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null)
        return result;
        for(int i=0; i< height(root);i++)
        {
            result.add(new ArrayList<Integer>());
        }
        zigzagLevelOrder(root, 0);
        return result;
    }
    private int height(TreeNode root)
    {
        if(root == null)
        return 0;
        return 1+Math.max(height(root.left),height(root.right));
    }
    private void zigzagLevelOrder(TreeNode root, int level) {
         if(root == null)
         return;
         List<Integer> levelList = result.get(level);
         if(level % 2 == 0)
         levelList.add(root.val);
         else
         levelList.add(0,root.val);
         
         zigzagLevelOrder(root.left,level+1);
         zigzagLevelOrder(root.right,level+1);
            
    }    
        
}
