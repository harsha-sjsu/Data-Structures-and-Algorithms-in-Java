/* Question: Implement the following operations of a stack using queues.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
empty() -- Return whether the stack is empty.
Notes:
You must use only standard operations of a queue -- which means only push to back, peek/pop from front, size, and is empty operations are valid.
Depending on your language, queue may not be supported natively. You may simulate a queue by using a list or deque (double-ended queue), as long as you use only standard operations of a queue.
You may assume that all operations are valid (for example, no pop or top operations will be called on an empty stack) */

class MyStack {
    // Push element x onto stack.
    Queue<Integer> q1 = new LinkedList<Integer>();
    Queue<Integer> q2 = new LinkedList<Integer>();
    public void push(int x) {
        q1.add(x);
    }

    // Removes the element on top of the stack.
    public void pop() {
        while(!q1.isEmpty() && q1.size()!=1)
        {
            q2.add(q1.poll());
        }
        Queue<Integer> temp = new LinkedList<Integer>();
        temp = q1;
        q1 = q2;
        q2 = temp;
        q2.poll();
    }

    // Get the top element.
    public int top() {
       while(!q1.isEmpty() && q1.size()!=1)
        {
            q2.add(q1.poll());
        }
        Queue<Integer> temp = new LinkedList<Integer>();
        temp = q1;
        q1 = q2;
        q2 = temp;
        q1.add(q2.peek());
        return q2.poll(); 
    }

    // Return whether the stack is empty.
    public boolean empty() {
        return q1.isEmpty();
    }
}
